df_closed_door_small <- df_closed_door_large[sample(N, 200), ]
df_open_door_small   <- df_open_door_large[sample(N, 200), ]
updated1 <- update_model(model, df_closed_door_large)
updated2 <- update_model(model, df_open_door_large)
updated3 <- update_model(model, df_closed_door_small)
updated4 <- update_model(model, df_open_door_small)
dist1 <- query_distribution(updated1, query = "Y[X=1] - Y[X=0]", using = "posteriors")
dist2 <- query_distribution(updated2, query = "Y[X=1] - Y[X=0]", using = "posteriors")
dist3 <- query_distribution(updated3, query = "Y[X=1] - Y[X=0]", using = "posteriors")
dist4 <- query_distribution(updated4, query = "Y[X=1] - Y[X=0]", using = "posteriors")
write_rds(list(dist1 = dist1, dist2 = dist2, dist3=dist3, dist4=dist4), "saved/appendix_backdoor.rds")
}
back <- read_rds("saved/appendix_backdoor.rds")
v <- query_model(model, "Y[X=1] - Y[X=0]", using = "parameters")$mean
par(mfrow = c(2,2))
hist(back$dist4, xlim = c(-1, 1)*.4, main = "Small n, backdoor open", xlab = "ATE")
abline(v = v, col = "red")
hist(back$dist3, xlim = c(-1, 1)*.4, main = "Small n, backdoor blocked", xlab = "ATE")
abline(v = v, col = "red")
hist(back$dist2, xlim = c(-1, 1)*.4, main = "Large n, backdoor open", xlab = "ATE")
abline(v = v, col = "red")
hist(back$dist1, xlim = c(-1, 1)*.4, main = "Large n, backdoor blocked", xlab = "ATE")
abline(v = v, col = "red")
model <- make_model("Z -> X -> Y")  %>%
set_confound(confound = list(X = "Y[X=1]==1"))
plot(model)
pars <- c( .5, .5,
.1, .2, .6, .1,
.1, .1, .7, .1,
.1, .1, .7, .1)
data <- make_data(model, n = 5000, parameters = pars)
if(do_diagnosis){
updated <- update_model(model, data)
write_rds(updated, "saved/appendix_IV_simple.rds")
}
updated <- read_rds("saved/appendix_IV_simple.rds")
result <- query_model(
updated,
queries = list(ATE = "c(Y[X=1] - Y[X=0])"),
given = list(TRUE, "X[Z=1] > X[Z=0]",  "X==0",  "X==1"),
using = "posteriors")
kable(result)
model <- make_model("Z -> X -> Y")  %>%
set_restrictions(decreasing("Z", "X")) %>%
set_confound(confound = list(X = "Y[X=1]==1"))
if(do_diagnosis){
updated <- update_model(model, data)
write_rds(updated, "saved/appendix_IV_simple2.rds")
}
updated <- read_rds("saved/appendix_IV_simple2.rds")
result <- query_model(
updated,
queries = list(ATE = "c(Y[X=1] - Y[X=0])"),
given = list(TRUE, "X[Z=1] > X[Z=0]",  "X==0",  "X==1"),
using = "posteriors")
kable(result)
frontdoor <- make_model("X -> M -> Y") %>%
set_confound(list(X = "Y[M=1]>Y[M=0]",
X = "Y[M=1]<Y[M=0]"))
plot(frontdoor)
if(do_diagnosis) {
data <- make_data(frontdoor, n = 2000)
updated_1 <- update_model(frontdoor, mutate(data, M = NA))
updated_2 <- update_model(frontdoor, data)
Q1 <- query_distribution(updated_1, using = "posteriors", query = "Y[X=1] - Y[X=0]")
Q2 <- query_distribution(updated_2, using = "posteriors", query = "Y[X=1] - Y[X=0]")
write_rds(list(Q1=Q1, Q2=Q2), "saved/appendix_frontdoor.rds")
}
frontdoor <- read_rds("saved/appendix_frontdoor.rds")
par(mfrow = c(1,2))
hist(frontdoor$Q1, xlim = c(-.3, .3), main= "Inferences given X,Y, data only", xlab = "ATE")
hist(frontdoor$Q2, xlim = c(-.3, .3), main = "Inferences given X,Y, and M data", xlab = "ATE")
model <- make_model("R -> S") %>%
set_parameters(node = c("R", "S"), parameters = list(c(2/3,1/3), c(1/3, 0, 1/3, 1/3)))
data <- make_data(model, n = 1000) %>%
mutate(R = ifelse(S==0, NA, R ))
if(do_diagnosis){
write_rds(update_model(model, data, refresh = 0), "saved/appendix_simple_selection1.rds")
}
updated <- read_rds("saved/appendix_simple_selection1.rds")
results <- query_model(updated, queries = "R==1", given = c(TRUE, "S==1"), using = c("parameters", "priors", "posteriors"), expand_grid = TRUE)
kable(results)
data <- make_data(model, n = 10000) %>%
filter(S==1)
if(do_diagnosis){
write_rds(update_model(model, data, refresh = 0), "saved/appendix_simple_selection2.rds")
}
updated <- read_rds("saved/appendix_simple_selection2.rds")
results <- query_model(updated, queries = "R==1", given = c(TRUE, "S==1"), using = c("parameters", "posteriors"), expand_grid = TRUE)
kable(results)
selection <- make_model("X <- W1 -> W2 -> X -> Y <- Z -> W2; W1 -> S")
selection <- make_model("X <- W1 -> W2 -> X -> Y <- Z -> W2; W1 -> S")
plot(selection)
if(do_diagnosis) {
selection <- make_model("X <- W1 -> W2 -> X -> Y <- Z -> W2; W1 -> S") %>%
set_restrictions(c(
"(S[W1=1] < S[W1=0])",
"(X[W2=1] < X[W2=0])",
"(X[W1=1] < X[W1=0])",
"(Y[Z=1]  < Y[Z=0])",
"(Y[X=1]  < Y[X=0])")) %>%
set_restrictions(labels = list(W2 = c("0001", "1111")), keep = TRUE) %>%
set_parameters(statement = "(S[W1=1] > S[W1=0])",
node = "S", parameters = .14) %>%
set_parameters(statement = "(Y[X=1] != Y[X=0])",
node = "Y", parameters = 0) %>%
set_parameters(label = "0001", node = "X", parameters = .85)
selection$parameters_df
df  <- make_data(selection, n = 30000, using = "parameters")
df0 <- dplyr::filter(df, S==1)
df1 <- dplyr::mutate(df0, Z = NA, W1 = NA, W2 = NA)
df2 <- dplyr::mutate(df0, Z = NA)
df3 <- dplyr::mutate(df0, W1 = NA, W2 = NA)
sapply(0:1, function(w1) {sapply(0:1, function(w2)  with(dplyr::filter(df0, W1 == w1, W2==w2), mean(Y[X==1]) - mean(Y[X==0])))})
# summary(lm(Y~X*W2_norm ,  data = mutate(df0, W1_norm = W1- mean(W1), W2_norm = W2- mean(W2))))
M1 <- update_model(selection, df1)
M2 <- update_model(selection, df2)
M3 <- update_model(selection, df3)
OUT0 <- query_model(selection,
using = c("parameters", "priors"),
queries = "Y[X=1] - Y[X=0]")
OUT <- lapply(list(M1, M2, M3), function(M)
query_model(M, using = "posteriors", queries = "Y[X=1] - Y[X=0]"))
check <- query_model(M2, using = "posteriors", queries =
c(
"Y[X=1, W1=1, W2= 1] - Y[X=0, W1=1, W2= 1]",
"Y[X=1, W1=0, W2= 1] - Y[X=0, W1=0, W2= 1]",
"Y[X=1, W1=1, W2= 0] - Y[X=0, W1=1, W2= 0]",
"Y[X=1, W1=0, W2= 0] - Y[X=0, W1=0, W2= 0]",
"Y[X=1, Z= 1] - Y[X=0, W1=0, Z= 1]",
"Y[X=1, Z= 0] - Y[X=0, W1=0, Z= 0]"))
write_rds(list(M1=M1, M2=M2, M3=M3, OUT0=OUT0, OUT=OUT, df0=df0, df1=df1, df2=df2, df3=df3, selection), "saved/17_selection_list.rds")
}
selection_list <- read_rds("saved/17_selection_list.rds")
kable(selection_list$OUT0, caption = "Estimand values")
lm1 <- lm(Y~X,  data = selection_list$df0)
lm2 <- lm(Y~X*W1_norm + X*W2_norm, data = mutate(selection_list$df0, W1_norm = W1 - mean(W1),            W2_norm = W2 - mean(W2)))
lm3 <- lm(Y~X*Z_norm, data = mutate(selection_list$df0, Z_norm = Z - mean(Z)))
stargazer(lm1, lm2, lm3, type = 'html', header = FALSE, keep = "X")
lm1 <- lm(Y~X,  data = selection_list$df0)
lm2 <- lm(Y~X*W1_norm + X*W2_norm, data = mutate(selection_list$df0, W1_norm = W1 - mean(W1),            W2_norm = W2 - mean(W2)))
lm3 <- lm(Y~X*Z_norm, data = mutate(selection_list$df0, Z_norm = Z - mean(Z)))
stargazer(lm1, lm2, lm3, type = 'html', header = FALSE, keep = "X")
kable(
cbind(
data = c("X,Y", "X,Y, W1, W2", "X, Y, Z"),
bind_rows(selection_list$OUT)[, c("mean", "sd")]
# [c(1,3,5),]
))
model <- make_model("X -> Y <- U1 -> W <- U2 -> X") %>%
set_restrictions(labels = list(Y = c("0001", "1111"), W = "0001"), keep = TRUE) %>%
set_restrictions("(X[U2=1]<X[U2=0])") %>%
set_parameters(node = c("U1", "Y"), parameters = list(c(1/4, 3/4), c(2/3, 1/3)))
plot(model)
data <- make_data(model,
n = 25000,
vars = c("W", "X", "Y"),
using = "parameters")
query_model(model, queries = list(`Y(1)-Y(0)` = "Y[X=1] - Y[X=0]"),
using = "parameters",
given = list(
TRUE,
"W==0",
"W==1",
"X==1 & Y==1",
"X==1 & Y==1 & W==0",
"X==1 & Y==1 & W==1")) %>%
kable
M1 <- lm(Y~X, data = data)
M2 <- lm(Y~X+W, data = data)
M3 <- lm(Y~X*W_norm, data = mutate(data, W_norm = W - mean(W)))
stargazer::stargazer(M1, M2, M3, type = "html", header = FALSE)
if(do_diagnosis){
updated_no_W <- update_model(model, select(data, X,Y))
write_rds(updated_no_W, "saved/appendix_collider1.rds")
Q1 <- query_model(updated_no_W, queries = list(`Y(1)-Y(0)` = "Y[X=1] - Y[X=0]"),
using = "posteriors",
given = list(
TRUE,
"W==0",
"W==1",
"X==1 & Y==1",
"X==1 & Y==1 & W==0",
"X==1 & Y==1 & W==1"))
write_rds(Q1, "saved/appendix_colliderQ.rds")
updated_W <- update_model(model,  select(data, X,Y, W))
write_rds(updated_W, "saved/appendix_collider2.rds")
Q2 <- query_model(updated_W, queries = list(`Y(1)-Y(0)` = "Y[X=1] - Y[X=0]"),
using = "posteriors",
given = list(
TRUE,
"W==0",
"W==1",
"X==1 & Y==1",
"X==1 & Y==1 & W==0",
"X==1 & Y==1 & W==1"))
write_rds(Q2, "saved/appendix_colliderQW.rds")
}
updated_no_W <- read_rds("saved/appendix_collider1.rds")
updated_W <- read_rds("saved/appendix_collider2.rds")
colliderQ <- read_rds("saved/appendix_colliderQ.rds")
colliderQW <- read_rds("saved/appendix_colliderQW.rds")
kable(colliderQ  , caption = "Collider excluded from model")
kable(colliderQW, caption = "Collider included in model")
model <-
make_model("X -> M -> Y") %>%
set_confound(list(X = "Y[X=1]==1 & Y[X=0]==1"))
plot(model)
model <- model %>%
set_parameters(
node = c("X", "M", "Y"),
parameters = list(
c(.75, .25, .25, .75),
c(.25, 0, .5, .25),
c(.25, 0, .5, .25)))
query_model(model, list(ATE = "Y[X=1] - Y[X=0]"), using = "parameters")  %>% kable()
n <- 20000
full_data <-  make_data(model, n, using = "parameters")
XY_data <- full_data %>% select(X, Y)
some_data  <- full_data %>%  mutate(M = ifelse((1:n) %in% sample(1:n, 100), M, NA))
summary(lm(Y~X, data = full_data))$coef %>%
kable(digits = 2)
if(do_diagnosis){
# X, Y data only
updated_XY       <- update_model(model, XY_data, iter = 6000)
write_rds(updated_XY, "saved/17_mixing1XY.rds")
# Full Data
updated_full    <- update_model(model, full_data, iter = 6000)
write_rds(updated_full, "saved/17_mixing2XY.rds")
# Partial Data
updated_partial <- update_model(model, some_data, iter = 6000)
write_rds(updated_partial, "saved/17_mixing3XY.rds")
}
updated_XY <-  read_rds("saved/17_mixing1XY.rds")
updated_full <- read_rds("saved/17_mixing2XY.rds")
updated_partial <- read_rds("saved/17_mixing3XY.rds")
# X, Y data only
updated_XY      <- update_model(model, XY_data)
# Full Data
updated_full    <- update_model(model, full_data)
# Partial Data
updated_partial <- update_model(model, some_data)
plot_posterior <- function(model, main = "", prior = FALSE) {
pars <- get_parameters(model)
if(prior) {
model <- set_prior_distribution(model)
lambdas <- model$prior_distribution %>% data.frame
}
if(!prior) lambdas <- model$posterior_distribution %>% data.frame
lambdas      <-
lambdas  %>%
mutate(ATE = M.01*(Y.01 - Y.10) + M.10*(Y.10 - Y.01),
confound = X_1.1 - X_0.1)
plot(lambdas$confound, lambdas$ATE, xlim = c(-1,1), ylim = c(-.7, .7), main = main, xlab = "Confounding", ylab = "ATE", pch = 20, cex = .5)
abline(v = pars["X_1.1"] - pars["X_0.1"], col = "red")
abline(a = .25, b = 0, col = "red")
abline(v = mean(lambdas$confound))
abline(a = mean(lambdas$ATE), b = 0)
}
par(mfrow = c(2,2))
plot_posterior(model, main = "prior", prior = TRUE)
plot_posterior(updated_XY, main = "data on X,Y only")
plot_posterior(updated_full, main = "full data on X, Y and M")
plot_posterior(updated_partial, main = "XY for all, M for some")
model <- make_model("X -> M1 -> Y <- M2 <- X") %>%
set_restrictions(c(decreasing("X", "M1"),
decreasing("M1", "Y"),
decreasing("X", "M2"),
decreasing("M2", "Y"))) %>%
set_parameters(node = c("M1", "M2"), parameters = list(c(0,1,0), c(.5, 0,.5)), normalize=FALSE)  %>%
set_parameters(statement = "(Y[M1=1] == Y[M1=0])", parameters = 0)
plot(model)
Q1 <- query_model(model,
queries = list(ate = te("X", "Y"),
via_M1 = "(M1[X=1]>M1[X=0]) & (Y[M1=1]>Y[M1=0])",
via_M2 = "(M2[X=1]>M2[X=0]) & (Y[M2=1]>Y[M2=0])"),
using = c("parameters", "priors"),
expand_grid = TRUE)
Q1 %>% arrange(Using) %>% select(-Given) %>% kable(caption = "Priors and parameters")
# Updating
if(do_diagnosis){
n <- 1000
full_data <-  make_data(model, n, using = "parameters")
XY_data  <- full_data %>% select(X, Y)
some_data  <- full_data %>%  mutate(
M1 = ifelse((1:n) %in% sample(1:n, 20), M1, NA),
M2 = ifelse(is.na(M1), NA, M2))
updated_XY    <- update_model(model, XY_data)
updated_mixed <- update_model(model, some_data)
write_rds(updated_XY, "saved/17_twopaths1.rds")
write_rds(updated_mixed, "saved/17_twopaths2.rds")
via_M1 <- query_distribution(updated_XY, "(M1[X=1]>M1[X=0]) & (Y[M1=1]>Y[M1=0])", using = "posteriors")
via_M2 <- query_distribution(updated_XY, "(M2[X=1]>M2[X=0]) & (Y[M2=1]>Y[M2=0])", using = "posteriors")
# plot(via_M1, via_M2)
}
updated_XY <- read_rds("saved/17_twopaths1.rds")
updated_mixed  <- read_rds("saved/17_twopaths2.rds")
# Inferences with model updated by knowledge of XY only
query_model(updated_XY,
queries = list(ate = te("X", "Y"),
via_M1 = "(M1[X=1]>M1[X=0]) & (Y[M1=1]>Y[M1=0])",
via_M2 = "(M2[X=1]>M2[X=0]) & (Y[M2=1]>Y[M2=0])"),
using = c("posteriors"),
expand_grid = TRUE) %>% kable(caption = "Inferences with 1000 observations; data on X, Y, only")
query_model(updated_mixed,
queries = list(ate = te("X", "Y"),
via_M1 = "(M1[X=1]>M1[X=0]) & (Y[M1=1]>Y[M1=0])",
via_M2 = "(M2[X=1]>M2[X=0]) & (Y[M2=1]>Y[M2=0])"),
using = c("posteriors"),
expand_grid = TRUE)  %>% kable(caption = "Inferences with 1000 observations for X, Y,  20 observations for M1, M2")
data <- make_model("X -> M -> Y") %>%
make_data(n = 2000,
parameters = c(.5, .5, .2, 0, .8, 0, 0, 0, .8, .2))
kable(cor(data), digits = 2, caption = "Data contains strong correlations.")
model_1 <-
make_model("X -> M -> Y <- X; X <-> M; M <->Y; X <-> Y")
model_2 <-
make_model("X -> M -> Y <- X; M <->Y")
par(mfrow = 1:2)
plot(model_1)
# title(main = list("X not known to be randomized", cex = .5))
plot(model_2)
# title("X  known to be randomized")
# text(0, -1.3, "X  known to be randomized")
model_1 <- update_model(model_1, data, iter = 6000)
query_model(model_1,
queries = "Y[X=1] > Y[X=0]",
given = c("X==1 & Y==1", "X==1 & M==1 & Y==1"),
using = c("priors", "posteriors"),
expand_grid = TRUE)
if(do_diagnosis){
model_1 <- update_model(model_1, data, iter = 6000)
model_2 <- update_model(model_2, data, iter = 6000)
q1 <- query_model(model_1,
queries = "Y[X=1] > Y[X=0]",
given = c("X==1 & Y==1", "X==1 & M==1 & Y==1", "X==1 & M==0 & Y==1"),
using = c("priors", "posteriors"),
expand_grid = TRUE)
q2 <- query_model(model_2,
queries = "Y[X=1] > Y[X=0]",
given = c("X==1 & Y==1", "X==1 & M==1 & Y==1", "X==1 & M==0 & Y==1"),
using = c("priors", "posteriors"),
expand_grid = TRUE)
write_rds(model_1, "saved/App_somethingnothing_model_1.rds")
write_rds(model_2, "saved/App_somethingnothing_model_2.rds")
write_rds(q1, "saved/App_somethingnothing1.rds")
write_rds(q2, "saved/App_somethingnothing2.rds")
}
q1 <- read_rds("saved/App_somethingnothing1.rds")
q2 <- read_rds("saved/App_somethingnothing2.rds")
q1 %>% arrange(Using) %>% kable(
caption = "Can observation of large N data render mediator $M$ informative for case level inference? Observational data.")
kable(q2 %>% arrange(Using),
caption = "Can observation of large N data render mediator $M$ informative for case level inference? X randomized.")
model1 <- read_rds("saved/App_somethingnothing_model1.rds")
model1 <- read_rds("saved/App_somethingnothing_model1.rds")
model1 <- read_rds("saved/App_somethingnothing_model_1.rds")
kable(cbind(prior = get_parameters(model1, param_type = "flat"),
posterior = get_parameters(model1, param_type = "posterior_mean")), digits = 2)
model <- make_model("Case -> W  -> X -> Y <- W") %>%
set_restrictions("W[Case = 1] < W[Case = 0]") %>%
set_parameters(node = "X", statement = "X[W=1]>X[W=0]", parameters = 1/2)%>%
set_parameters(node = "Y", statement = complements("W", "X", "Y"), parameters = .17) %>%
set_parameters(node = "Y", statement = decreasing("X", "Y"), parameters = 0)
model$parameters_df
plot(model)
query_model(model,
queries = list(Incidence = "W==1",
ATE = "Y[X=1] - Y[X=0]",
CATE = "Y[X=1, W=1] - Y[X=0, W=1]"),
given = c("Case==0", "Case==1"),
using = c("priors", "parameters"), expand_grid = TRUE) %>% kable
data <- make_data(model, n = 1000,
vars = list(c("Case", "W"), c("X", "Y")),
probs = c(1,1),
subsets = c(TRUE, "Case ==1"))
transport <- update_model(model, data)
query_model(transport,
queries = list(Incidence = "W==1",
ATE = "Y[X=1] - Y[X=0]",
CATE = "Y[X=1, W=1] - Y[X=0, W=1]"),
given = c("Case==0", "Case==1"),
using = c("posteriors", "parameters"), expand_grid = TRUE)
if(do_diagnosis){
data <- make_data(model, n = 10000,
vars = list(c("Case", "W"), c("X", "Y")),
probs = c(1,1),
subsets = c(TRUE, "Case == 0"))
transport <- update_model(model, data)
write_rds(query_model(transport,
queries = list(Incidence = "W==1",
ATE = "Y[X=1] - Y[X=0]",
CATE = "Y[X=1, W=1] - Y[X=0, W=1]"),
given = c("Case==0", "Case==1"),
using = c("posteriors", "parameters"), expand_grid = TRUE),
"saved/app_transport.rds")
}
q <- read_rds("saved/app_transport.rds")
kable(q, caption = "Extrapolation when two sites differ on $W$ and $W$ is observable in both sites")
if(do_diagnosis){
data2 <- make_data(model, n = 10000,
vars = list(c("Case"), c("W", "X", "Y")),
probs = c(1,1),
subsets = c(TRUE, "Case == 0"))
transport2 <- update_model(model, data2)
write_rds(query_model(transport2,
queries = list(Incidence = "W==1",
ATE = "Y[X=1] - Y[X=0]",
CATE = "Y[X=1, W=1] - Y[X=0, W=1]"),
given = c("Case==0", "Case==1"),
using = c("posteriors", "parameters"), expand_grid = TRUE),
"saved/app_transport2.rds")
}
q2 <- read_rds("saved/app_transport2.rds")
kable(q2, caption = "Extrapolation when two sites differ on $W$ and $W$ is not observable in target country.")
model <- make_model("R -> X -> Y; O -> X <- Z; O <-> Y") %>%
set_restrictions("(X[R=1, Z=0]!=0) | (X[R=1, Z=1]!=1) | (X[R=0, O=0]!=0) | (X[R=0, O=1]!=1)")
plot(model)
P <- get_parameter_matrix(model)
kable(P[,1:4])
model <- model %>%
set_parameters(node = "Y", confound = "O==0", parameters = c(.8, .2,  0,  0)) %>%
set_parameters(node = "Y", confound = "O==1", parameters = c( 0,  0, .6, .4))
result <- query_model(
model,
queries = list(ATE = "c(Y[X=1] - Y[X=0])"),
given = list(TRUE, "R==0", "R==1"),
using = "parameters")
kable(result, caption = "estimands")
result <- query_model(
model,
queries = list(ATE = "c(Y[X=1] - Y[X=0])"),
given = list(TRUE, "R==0", "R==1"),
using = "priors")
kable(result, caption = "priors")
data <- make_data(model, n = 800)
estimatr::difference_in_means(Y~X, data = filter(data, R==0))
x <- estimatr::difference_in_means(Y~X, data = filter(data, R==0))
kable(summary(x)[[1]], digits = 3, caption = "Inferences on the ATE from differences in means")
posterior <- update_model(model, data)
if(do_diagnosis){
write_rds(update_model(model, data), "saved/appendix_exp_obs.rds")
}
updated <- read_rds("saved/appendix_exp_obs.rds")
result <- query_model(
updated,
queries = list(ATE = "c(Y[X=1] - Y[X=0])"),
given = list(TRUE, "R==0", "R==1"),
using = "posteriors")
kable(result)
updated_no_O <- update_model(model, dplyr::filter(data, R==1))
if(do_diagnosis){
write_rds(update_model(model, dplyr::filter(data, R==1)), "saved/appendix_exp_obs_2.rds")
}
updated_no_O <- read_rds("saved/appendix_exp_obs_2.rds")
result <- query_model(
updated_no_O,
queries = list(ATE = "c(Y[X=1] - Y[X=0])"),
given = list(TRUE, "R==0", "R==1"),
using = "posteriors")
kable(result)
result2 <- query_model(
updated,
queries = list(ATE = "c(Y[X=1] - Y[X=0])"),
given = list("R==1 & X==0", "R==1 & X==1", "R==0 & X==0", "R==0 & X==1"),
using = "posteriors")
kable(result2)
model <- make_model("X -> Y <- Z -> K") %>%
set_parameters(
statement = list("(Y[X=1, Z = 1] > Y[X=0, Z = 1])",
"(K[Z = 1] > K[Z = 0])"),
node = c("Y","K"),
parameters = c(.24,.85))
plot(model)
df <- make_data(model, 300, using = "parameters") %>%
mutate(study = rep(1:3, each = 100),
K = ifelse(study == 1, NA, K),
X = ifelse(study == 2, NA, X),
Y = ifelse(study == 2, NA, Y),
Z = ifelse(study == 3, NA, Z)
)
if(do_diagnosis){
updated1 <- update_model(model, filter(df, study == 1))
updated2 <- update_model(model, filter(df, study == 2))
updated3 <- update_model(model, filter(df, study == 3))
updated_all <- update_model(model, df)
subs <- list(
"X == 1 & Y == 1 & K == 1",
"X == 1 & Y == 1 & K == 0")
subs2 <- list(
"X == 1 & Y == 1 & K == 1",
"X == 1 & Y == 1 & K == 0",
"X == 1 & Y == 1 & K == 1 & Z == 1",
"X == 1 & Y == 1 & K == 0 & Z == 1",
"X == 1 & Y == 1 & K == 1 & Z == 0",
"X == 1 & Y == 1 & K == 0 & Z == 0")
# If updating done using case data only
result1 <- query_model(updated1, queries = "Y[X=0] == 0", given = subs, using = "posteriors")
result2 <- query_model(updated2, queries = "Y[X=0] == 0", given = subs, using = "posteriors")
result3 <- query_model(updated3, queries = "Y[X=0] == 0", given = subs, using = "posteriors")
result4 <- query_model(updated_all, queries = "Y[X=0] == 0", given = subs2, using = "posteriors")
write_rds(list(result1, result2, result3, result4), "saved/app_frankenstein.rds")
}
frank <- read_rds("saved/app_frankenstein.rds")
kable(frank[[3]][,-c(1,3)], caption = "Clue is uninformative in Study 1")
kable(frank[[1]][,-c(1,3)], caption = "Clue is also uninformative in Study 2 (factorial)")
kable(frank[[2]][,-c(1,3)], caption = "Clue is also uninformative in Study 3 (experiment studying $K$)")
kable(frank[[4]][,-c(1,3)], caption = "Clue is informative after combining studies linking $K$ to $Z$ and $Z$ to $Y$")
source("_packages_used.R")
do_diagnosis <- TRUE
get_query_types(model = make_model("A -> B <- C"),
query = substitutes("A", "C", "B"))
