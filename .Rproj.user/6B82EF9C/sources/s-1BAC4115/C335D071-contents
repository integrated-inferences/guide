#' Fit causal model using stan
#'
#' Takes a model and data and returns a model object with data attached and a posterior model
#' @param model A model object generated by \code{make_model()}.
#' @param fit A fitted stan model. If not provided a gbiqq model is compiled from stan file "inst/tools/simplexes.stan"
#' @param data A data frame with observations
#' @param data_type Either "long" (as made by `simulate_data()`) or "compact"
#' @param keep_fit Logical, defulating to FALSE, indicates whether to append the stanfit object to the model.
#' (as made by `collapse_data()``). Compact data must have entries for each member of each strategy family to produce a valid simplex.
#' @param ... Options passed onto \code{rstan::stan} call.
#' @import methods
#' @import Rcpp
#' @importFrom rstan stan
#' @importFrom rstan extract
#' @export
#' @examples
#' model <- make_model("X->Y")
#' data_long   <- simulate_data(model, n = 4)
#' data_short  <- collapse_data(data_long, model)
#' fit <- fitted_model()
#' model_1 <- update_model(model, data_long)
#' model_2 <- update_model(model, data_long, fit = fit)
#'
#' # Throws error unless compact data indicated:
#' \dontrun{
#' model_3 <- update_model(model, data_short)
#' }
#' model_4 <- update_model(model, data_short, fit = fit, data_type = "compact")
#'
#' # It is possible to implement updating without data, in which case the posterior
#' # is a stan object that reflects the prior
#' model5 <- update_model(model)
#'
#' # Advanced: Example of a model with tailored parameters.
#' # We take a model and add a tailored P matrix (which maps from parameters
#' # to causal types) and a tailored parameters_df which reports that
#' # all parameters are in one family.
#' # Parameters in this example are not connected with nodal types in any way.
#'
#' \dontrun{
#' model <- make_model("X->Y")
#' model$P <- diag(8)
#' colnames(model$P) <- rownames(model$causal_types)
#' model$parameters_df <- data.frame(
#'   param_names = paste0("x",1:8),
#'   param_set = 1, priors = 1, parameters = 1/8)
#'
#' # Update fully confounded model on strongly correlated data
#'
#' data <- make_data(make_model("X->Y"), n = 100,
#'   parameters = c(.5, .5, .1,.1,.7,.1))
#' fully_confounded <- update_model(model, data,
#'   fit = fit, keep_fit = TRUE)
#' fully_confounded$stan_fit
#' query_model(fully_confounded, "Y[X = 1] > Y[X=0]", using = "posteriors")
#' # To see the confounding:
#' with(fully_confounded$posterior_distribution %>% data.frame(),
#' {par(mfrow = c(1,2))
#'  plot(x1, x5, main = "joint distribution of X0.Y00, X0.Y01")
#'  plot(x1, x6, main = "joint distribution of X0.Y00, X1.Y01")})
#' }
#'
update_model <- function(model, data = NULL, fit = NULL, data_type = "long", keep_fit = FALSE, ...) {

	if(data_type == "long") {

		if(is.null(data)) {

			message("No data provided"); data_events <- minimal_event_data(model)

		} else {

		if(nrow(data) ==0 | all(is.na(data))) {

			message("No data provided");
			data_events <- minimal_event_data(model)

		} else {

		if(!any(model$nodes %in% names(data))) stop("Data should contain columns corresponding to model nodes")

		data_events <- collapse_data(data, model)}

		}}

	if(data_type == "compact") {if(!all(c("event", "strategy", "count") %in% names(data))) stop(
		"Compact data should contain columnes `event`, `strategy` and `count`")
		data_events <- data
		}

	stan_file <- system.file("tools" ,"simplexes.stan", package = "gbiqq")
	stan_data <- prep_gbiqq_data(model = model, data = data_events)

	if(is.null(fit)) {
		newfit <-	rstan::stan(file = stan_file, data = stan_data,  ...)
	} else {
		newfit <-	rstan::stan(fit = fit, data = stan_data,  ...)
	}

	if(keep_fit) model$stan_fit <- newfit

	posterior_distribution <- extract(newfit, pars= "lambdas")$lambdas
	colnames(posterior_distribution) <- get_parameter_names(model)

	model$posterior_distribution <- posterior_distribution
	model$data <- data

	model
}


#' Generate a fitted stan model
#'
#' @export
#'
fitted_model <- function() {
	model <- make_model("X->Y")
	update_model(model, make_data(model, n = 1),
							 chains = 1, iter = 1000, refresh = 0,
							 keep_fit = TRUE)$stan_fit
}

#' gbiqq
#'
#' An alias for \code{\link{update_model}}
#'
#' @param ... arguments passed to  \code{\link{update_model}}
#'
#' @export

gbiqq <- function(...) update_model(...)
