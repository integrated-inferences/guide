{
    "collab_server" : "",
    "contents" : "#' Selects Transformation\n#'\n#' Chooses the 'best' transformation in the sense of AIC, R.Squared, Skewness or Kurtosis; For positive \\code{y} compares between Box-Cox, Dual and Manly transformations; For all values of y it compares between Yeo-Johnson, Manly, Modulus and Bickel-Doksum  \n#' @param data a data.frame or a matrix, whose first column is the dependent variable and the rest of the columns are the independent variables.\n#' @return An object of class \\code{transformation} with the following arguments\n#' @return llike The value of profile log-likelihood at its maximum\n#' @return logvector The profile log-likelihood evaluated at \\code{lambdavector}\n#' @return lambdavector Employed family of transformations\n#' @return A sequence with optional values for \\code{lambda}\n#' @return family Employed family of transformations\n#' @return yt Vector of the transformed response variable \\code{y}\n#' @return modelt An object of type \\code{lm} employing the transformed vector \\code{yt} as the response variable\n#' @keywords internal\ndocompareTransformation <- function (data, lambda.dual = 0.5, plotit = TRUE,...) {\n  n <- nrow(data)\n  k <- ncol(data)-1\n  y <- data[,1]\n  x <- data[,2:k]\n  modely <- lm(y ~ ., data.frame(y, x ))\n  logVector <- NULL\n  residt <- NULL\n  lambdaVector <- NULL\n  family1 <- NULL\n  family2 <- NULL\n  trans <- list()\n  if (any(y <= 0)) {\n      t1 <- trans$yeojohnson <-  yeojohnson(data)\n      t2 <- trans$modulus <- modulus(data)\n      t3 <- trans$bickeldoksum <-  bickeldoksum(data)\n      t4 <- trans$manly <-  manly(data, tr = TRUE)\n      showplot <- c(!is.infinite(t1$llike), !is.infinite(t2$llike), !is.infinite(t3$llike), !is.infinite(t4$llike))     \n      lambdahVector <-  c(ifelse(showplot[1], t1$lambdahat , NA), \n                          ifelse(showplot[2], t2$lambdahat , NA),\n                          ifelse(showplot[3], t3$lambdahat, NA),\n                          ifelse(showplot[4], t4$lambdahat, NA))    \n      AICVector <- c(-2*t1$llike, -2*t2$llike, -2*t3$llike, -2*t4$llike)\n      R2Vector <-  c(ifelse(showplot[1], summary(t1$modelt)$r.squared, NA), \n                     ifelse(showplot[2], summary(t2$modelt)$r.squared, NA),\n                     ifelse(showplot[3], summary(t3$modelt)$r.squared, NA),\n                     ifelse(showplot[4], summary(t4$modelt)$r.squared, NA) )     \n      SKVector <-  c(ifelse(showplot[1], skewness(t1$modelt$residuals), NA),\n                     ifelse(showplot[2], skewness(t2$modelt$residuals), NA),\n                     ifelse(showplot[3], skewness(t3$modelt$residuals), NA), \n                     ifelse(showplot[4], skewness(t4$modelt$residuals), NA))\n      KTVector <-  c(ifelse(showplot[1], kurtosis(t1$modelt$residuals), NA),\n                     ifelse(showplot[2], kurtosis(t2$modelt$residuals), NA),\n                     ifelse(showplot[3], kurtosis(t3$modelt$residuals), NA), \n                     ifelse(showplot[4], kurtosis(t4$modelt$residuals), NA))\n      if(length(t1$yt) < 5000){\n        p_value <- c(ifelse(showplot[1],  shapiro.test(t1$modelt$residuals)$p.value, NA),\n                     ifelse(showplot[2], shapiro.test(t2$modelt$residuals)$p.value, NA), \n                     ifelse(showplot[3], shapiro.test(t3$modelt$residuals)$p.value, NA),  \n                     ifelse(showplot[4], shapiro.test(t4$modelt$residuals)$p.value, NA)) \n        W <- c(ifelse(showplot[1], shapiro.test(t1$modelt$residuals)$statistic, NA),\n               ifelse(showplot[2], shapiro.test(t2$modelt$residuals)$statistic, NA), \n               ifelse(showplot[3], shapiro.test(t3$modelt$residuals)$statistic, NA), \n                ifelse(showplot[4],shapiro.test(t4$modelt$residuals)$statistic, NA)) \n      }\n      else {\n      p_value <- rep(\"n > 5000\", 4) \n      W <- rep(\"-\", 4)  \n      }\n      output <- data.frame(lambdahat = lambdahVector, AIC= AICVector, R.Squared = R2Vector, Skewness = SKVector, Kurtosis = KTVector, p_value = p_value)\n      rownames(output) <- c(\"Yeo-Johnson\", \"Modulus\", \"Bickel-Doksum\", \"Manly\")\n  }\n  else {\n    t1 <- trans$bcx <-  bx_cx(data)\n    t2 <- trans$dual <- dual(data, lambda = lambda.dual)\n    t3 <- trans$manly <-  manly(data, tr = TRUE)\n    t4 <- trans$notrans <- modely\n    t4$family <- \"No Trans.\"\n    showplot <- c(!is.infinite(t1$llike), TRUE , !is.infinite(t3$llike), TRUE)     \n    lambdahVector <-  c(ifelse(showplot[1], t1$lambdahat , NA),\n                        lambda.dual,\n                        ifelse(showplot[3], t3$lambdahat, NA),\n                        \"-\")    \n    AICVector <- c(-2*t1$llike, NA, -2*t3$llike, -2*logLik(t4))\n    R2Vector <-  c(ifelse(showplot[1], summary(t1$modelt)$r.squared, NA),\n                   ifelse(showplot[2], summary(t2$modelt)$r.squared, NA), \n                   ifelse(showplot[3], summary(t3$modelt)$r.squared, NA), \n                   ifelse(showplot[4], summary(t4)$r.squared, NA) )     \n    SKVector <-  c(ifelse(showplot[1], skewness(t1$modelt$residuals), NA),\n                   ifelse(showplot[2], skewness(t2$modelt$residuals), NA),\n                   ifelse(showplot[3], skewness(t3$modelt$residuals), NA),\n                   ifelse(showplot[4], skewness(t4$residuals), NA))\n    KTVector <-  c(ifelse(showplot[1], kurtosis(t1$modelt$residuals), NA),\n                   ifelse(showplot[2], kurtosis(t2$modelt$residuals), NA),\n                   ifelse(showplot[3], kurtosis(t3$modelt$residuals), NA), \n                   ifelse(showplot[4], kurtosis(t4$residuals), NA))\n    if(length(t1$yt) < 5000) {\n    p_value <- c(ifelse(showplot[1], shapiro.test(t1$modelt$residuals)$p.value, NA), \n                 ifelse(showplot[2], shapiro.test(t2$modelt$residuals)$p.value, NA),\n                 ifelse(showplot[3], shapiro.test(t3$modelt$residuals)$p.value, NA), \n                 ifelse(showplot[4], shapiro.test(t4$residuals)$p.value, NA)) \n    W <- c(ifelse(showplot[1], shapiro.test(t1$modelt$residuals)$statistic, NA), \n           ifelse(showplot[2], shapiro.test(t2$modelt$residuals)$statistic, NA), \n           ifelse(showplot[3], shapiro.test(t3$modelt$residuals)$statistic, NA), \n           ifelse(showplot[4], shapiro.test(t4$residuals)$statistic, NA)) \n    }\n    else{ \n      p_value <- rep(\"n > 5000\", 4)  \n      W <- rep(\"-\", 4)  \n      }\n    output <- data.frame(lambdahat = lambdahVector, AIC= AICVector, R.Squared = R2Vector, Skewness = SKVector, Kurtosis = KTVector, W = W, p_value = p_value)\n      rownames(output) <- c(\"Box-Cox\", \"Dual\", \"Manly\", \"No Transf.\")\n    }\n      if(plotit == TRUE) {\n        nplot <- length(which(showplot))\n        if(showplot[1]) {\n          residt <- as.vector(rstandard(t1$modelt))\n          fittedt <- as.vector(t1$modelt$fitted.values)\n          family2 <- rep(t1$family, n)\n          }\n          if(showplot[2]) {\n            l  <- length(residt) \n            lt2 <- length(t2$modelt$residuals)\n            ini <- l + 1\n            fin <- l + lt2\n            residt[ini:fin] <- rstandard(t2$modelt)\n            family2[ini:fin] <- rep(t2$family, lt2)\n            fittedt[ini:fin] <- t2$modelt$fitted.values\n          }\n           if(showplot[3]) {\n             l  <- length(logVector) \n             lt3 <- length(t3$logvector)\n             ini <- l + 1\n             fin <- l + lt3\n             logVector[ini:fin] <- as.vector(t3$logvector)\n             lambdaVector[ini:fin] <-  as.vector(t3$lambdavector)\n             family1[ini:fin] <- rep(t3$family, lt3)\n             l  <- length(residt) \n             lt3 <- length(t3$modelt$residuals)\n             ini <- l + 1\n             fin <- l + lt3\n             residt[ini:fin] <- rstandard(t3$modelt)\n             family2[ini:fin] <- rep(t3$family, lt3)\n             fittedt[ini:fin] <- t3$modelt$fitted.value\n             lm <- length(mean)+ 1\n           }\n        if(showplot[4]) {\n          l  <- length(residt) \n          lt4 <- length(t4$residuals)\n          ini <- l + 1\n          fin <- l + lt4\n          residt[ini:fin] <- rstandard(t4)\n          family2[ini:fin] <- rep(t4$family, lt4)\n          fittedt[ini:fin] <- t4$fitted.value\n          lm <- length(mean)+ 1\n        }\n        \n     if(any(showplot)){\n       dataplot <- data.frame(loglike = logVector, lambda = lambdaVector, Family = family1 )\n       dataplot$family <- as.factor(family1)\n       dataplot2 <- data.frame(residualst= residt, fittedt = fittedt, Family = family2)\n       dataplot2$family <- as.factor(family2)\n     }\n     \n          cat(\"Press [enter] to continue or type in [q] to quit\" ) \n          line <- readline()\n          if(substr(line, 1, 1) != \"q\" & substr(line, 1, 1) != \"Q\" ) {\n          stats <- aggregate(residualst ~ family2, dataplot2, function(x) c(mean = mean(x), sd = sd(x)))\n          stats <- data.frame(Family = stats[, 1], stats[, 2])\n          gg1 <- with(stats[1,],stat_function(data = dataplot2[dataplot2$Family == stats[1, 1],],fun = dnorm, args = list(mean = mean, sd = sd))) \n          gg2 <- if(nplot ==2  | nplot ==3)  with(stats[2,],stat_function(data = dataplot2[dataplot2$Family == stats[2, 1],],fun = dnorm, args = list(mean=mean, sd = sd))) \n          gg3 <- if(nplot ==3)  with(stats[3,],stat_function(data = dataplot2[dataplot2$Family == stats[3, 1],],fun = dnorm, args = list(mean = mean, sd = sd)))       \n          print(ggplot(dataplot2, aes(x = residualst)) +  geom_histogram(bins = 20, aes(y=..density..,fill = Family),  color = \"grey30\")\n                +gg1 + gg2 + gg3 + facet_grid(.~Family   , scales =\"free\") + xlab(\"Standarized Residuals\") + ylab(\"Density\"))\n          cat(\"Press [enter] to continue or type in [q] to quit\" ) \n          line <- readline()\n          if(substr(line, 1, 1) != \"q\" & substr(line, 1, 1) != \"Q\" ) {\n             print(ggplot(data=dataplot2,aes(sample = residualst))\n                   + geom_point(stat=\"qq\",aes(colour=Family))\n                   + facet_grid(.~Family , scales = \"free\")\n                   +  ggtitle(\"QQ-Plot\")\n                   + geom_abline())\n            cat(\"Press [enter] to continue or type in [q] to quit\" ) \n            line <- readline()\n            if(substr(line, 1, 1) != \"q\" & substr(line, 1, 1) != \"Q\" ) {\n              print(ggplot(dataplot2, aes(x=fittedt, y=residualst, colour=Family)) \n               + geom_point(aes(group=Family))\n               + geom_hline( yintercept=0, color='black', linetype=2)\n               + facet_grid(.~Family    , scales = \"free\")\n               + ylab(\"Standarized Residuals\") \n               + xlab(\"Fitted Values\"))\n             \n            cat(\"Press [enter] to continue or type in [q] to quit\" ) \n            line <- readline()\n            if(substr(line, 1, 1) != \"q\" & substr(line, 1, 1) != \"Q\" ) {\n              print(ggplot(dataplot2, aes(x = family, y = residualst , fill = Family)) +\n                      geom_boxplot() + xlab(\"Transformations\") + ylab(\"Standarized Residuals\"))\n            } \n            \n           }\n          }\n        }  \n    }\n      cat( \" \\n *p-value for Shapiro-Wilk normality test \\n \\n \")\n      output\n  \n}",
    "created" : 1502201286380.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "514318845",
    "id" : "F2529475",
    "lastKnownWriteTime" : 1488127972,
    "last_content_update" : 1488127972,
    "path" : "C:/Users/Macartan/AppData/Local/Temp/wz61d2/transforma/R/DoCompareTransformation.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}